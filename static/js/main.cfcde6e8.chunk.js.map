{"version":3,"sources":["common/Constants.ts","data/dateToDayType.ts","data/daySchedule.ts","data/periodToSubject.ts","data/studentToLunchSchedule.ts","data/lunchPeriodSchedule.ts","common/CommonUtils.ts","page/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DayType","dateToDayType","Map","A","B","X","A1","V","type125","type","time","type34","periodToSubject","studentToLunchSchedule","Schedule125LA","period","subject","Schedule125LB","Schedule125LC","Schedule34LA","Schedule34LB","Schedule34LC","determineDayTypeByDate","dayStr","day","moment","get","format","spliceLunchPeriod","schedule","lunchPeriodSchedule","map","item","index","sub","console","log","splice","addLunchPeriod","studentName","dayNum","dayType","lunchSchedules","lunchSchType","includes","determineScheduleType","a","forEach","Home","useState","Date","toLocaleDateString","selectedDate","setSelectedDate","todaySchedule","setTodaySchedule","useEffect","then","items","Paper","Grid","container","justify","xs","TextField","id","label","defaultValue","onChange","event","target","value","InputLabelProps","shrink","TableContainer","component","Table","aria-label","TableHead","TableRow","TableCell","TableBody","row","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cfcde6e8.chunk.js","sourcesContent":["export enum DayType {\n  A = 'A',\n  A1 = 'A1',\n  B = 'B',\n  B1 = 'B1',\n  X = 'X',\n  V = 'V',\n}\n","import {DayType} from '../common/Constants'; \nexport const dateToDayType = new Map([\n  [\"8/19/2020\", DayType.A],\n  [\"8/20/2020\", DayType.B],\n  [\"8/21/2020\", DayType.A],\n  [\"8/24/2020\", DayType.B],\n  [\"8/25/2020\", DayType.A],\n  [\"8/26/2020\", DayType.B],\n  [\"8/27/2020\", DayType.A],\n  [\"8/28/2020\", DayType.B],\n  [\"8/31/2020\", DayType.A],\n  [\"9/1/2020\", DayType.B],\n  [\"9/2/2020\", DayType.A],\n  [\"9/3/2020\", DayType.B],\n  [\"9/4/2020\", DayType.A],\n  [\"9/7/2020\", DayType.X],\n  [\"9/8/2020\", DayType.B],\n  [\"9/9/2020\", DayType.A],\n  [\"9/10/2020\", DayType.B],\n  [\"9/11/2020\", DayType.A],\n  [\"9/14/2020\", DayType.B],\n  [\"9/15/2020\", DayType.A],\n  [\"9/16/2020\", DayType.B],\n  [\"9/17/2020\", DayType.A],\n  [\"9/18/2020\", DayType.B],\n  [\"9/21/2020\", DayType.A],\n  [\"9/22/2020\", DayType.B],\n  [\"9/23/2020\", DayType.A],\n  [\"9/24/2020\", DayType.B],\n  [\"9/25/2020\", DayType.A1],\n  [\"9/28/2020\", DayType.B],\n  [\"9/29/2020\", DayType.A],\n  [\"9/30/2020\", DayType.B],\n  [\"10/1/2020\", DayType.A],\n  [\"10/2/2020\", DayType.B],\n  [\"10/5/2020\", DayType.A],\n  [\"10/6/2020\", DayType.B],\n  [\"10/7/2020\", DayType.A],\n  [\"10/8/2020\", DayType.B],\n  [\"10/9/2020\", DayType.A],\n  [\"10/12/2020\", DayType.V],\n  [\"10/13/2020\", DayType.V],\n  [\"10/14/2020\", DayType.V],\n  [\"10/15/2020\", DayType.V],\n  [\"10/16/2020\", DayType.V],\n]);\n","export interface IType {\n  type: string,\n  time:string,\n  period?:number,\n  subject?:string,\n\n}\nexport const type125:IType[] = [\n  {\n    type: 'C',\n    time:'7:50 AM-9:25 AM',\n  },\n  {\n    type: 'C',\n    time:'9:30 AM-11:05 AM',\n  },\n  {\n    type: 'CL',\n    time:\"11:10 AM-1:10 PM\",\n  },\n  {\n    type: 'C',\n    time:\"1:15 PM-2:50 PM\",\n  },\n];\n\nexport const type34:IType[]  = [\n  {\n    type: 'C',\n    time:'7:50 AM-9:10 AM',\n  },\n  {\n    type: 'C',\n    time:'9:15 AM-10:35 AM',\n  },\n  {\n    type: 'CL',\n    time:\"10:40 AM-12:25 PM\",\n  },\n  {\n    type: 'C',\n    time:\"12:30 PM-1:50 PM\",\n  },\n];","export const periodToSubject:Map<number,string> = new Map([\n  [0, 'Lunch Break'],\n  [1, 'Science'],\n  [2, 'History'],\n  [3, 'Language Arts'],\n  [4, 'Leadership Characteristics'],\n  [5, 'Health and PE'],\n  [6, 'Latin'],\n  [7, 'Concert Band'],\n  [8, 'Saxon Math'],\n]);\n","import { DayType } from \"../common/Constants\";\n\nexport interface IStdToLunchSchType {\n  A?: 'LA'|'LB'|'LC';\n  B?: 'LA'|'LB'|'LC';\n}\nexport const studentToLunchSchedule: Map<string, IStdToLunchSchType> = new Map([\n  [\"MAYANKGUPTA\", { A: \"LA\", B: \"LC\" }],\n]);\n","import { IType } from \"./daySchedule\";\nexport const Schedule125LA: IType[] = [\n  { type: \"L\", time: \"11:10 AM-11:30 AM\", period: 0, subject:\"Lunch A\" },\n  { type: \"C\", time: \"11:35 AM-1:10 PM\" },\n];\n\nexport const Schedule125LB: IType[] = [\n  { type: \"C\", time: \"11:10 AM-11:38 AM\" },\n  { type: \"L\", time: \"11:43 AM-12:03 PM\", period: 0, subject:\"Lunch B\"  },\n  { type: \"C\", time: \"12:08 PM-12:55 PM\" },\n];\n\nexport const Schedule125LC: IType[] = [\n  { type: \"C\", time: \"11:10 AM-12:45 PM\" },\n  { type: \"L\", time: \"12:50 PM-1:10 PM\", period: 0, subject:\"Lunch C\"  },\n];\n\nexport const Schedule34LA: IType[] = [\n  { type: \"L\", time: \"10:40 AM-11:00 AM\", period: 0, subject:\"Lunch A\"},\n  { type: \"C\", time: \"11:05 AM-12:25 PM\" },\n];\n\nexport const Schedule34LB: IType[] = [\n  { type: \"C\", time: \"10:40 AM-11:08 AM\" },\n  { type: \"L\", time: \"11:13 AM-11:33 AM\", period: 0, subject:\"Lunch B\" },\n  { type: \"C\", time: \"11:38 PM-12:25 PM\" },\n];\n\nexport const Schedule34LC: IType[] = [\n  { type: \"C\", time: \"10:40 AM-12:00 AM\" },\n  { type: \"L\", time: \"12:05 PM-12:25 PM\",period: 0, subject:\"Lunch\" },\n];\n","import { dateToDayType } from \"../data/dateToDayType\";\nimport { type125, type34 } from \"../data/daySchedule\";\nimport { periodToSubject } from \"../data/periodToSubject\";\nimport { IType } from \"../data/daySchedule\";\nimport { studentToLunchSchedule } from \"../data/studentToLunchSchedule\";\nimport { DayType } from \"../common/Constants\";\nimport { IStdToLunchSchType } from \"../data/studentToLunchSchedule\";\nimport {\n  Schedule125LA,\n  Schedule34LA,\n  Schedule125LB,\n  Schedule34LB,\n  Schedule125LC,\n  Schedule34LC,\n} from \"../data/lunchPeriodSchedule\";\nimport moment from \"moment\";\n\nexport const determineDayTypeByDate = (dayStr: string): DayType | undefined => {\n  //console.log('dateStr', dayStr);\n  const day = moment(dayStr);\n  // console.log('day parsed', day.format('M/D/YYYY'));\n  return dateToDayType.get(day.format(\"M/D/YYYY\"));\n};\n\nconst spliceLunchPeriod = (schedule: IType[], lunchPeriodSchedule: IType[]) => {\n  schedule.map((item,index)=>{\n    if(index===2){\n      const period = item.period;\n      const sub = item.subject;\n      console.log('period', period);\n      console.log('subject', sub);\n      lunchPeriodSchedule.map(item=>{\n        if(item.type==='C'){\n          item.subject = sub;\n          item.period = period;\n        } else if (item.type==='L'){\n          // item.subject = 'Lunch';\n          // item.period = 0;\n        }\n      });\n    }\n  });\n  schedule.splice(2, 1, ...lunchPeriodSchedule);\n};\n\nconst addLunchPeriod = (\n  studentName: string,\n  dayNum: number,\n  dayType: DayType | undefined,\n  schedule: IType[]\n) => {\n  console.log(\"dayType\", dayType);\n  const lunchSchedules = studentToLunchSchedule.get(studentName);\n  let lunchSchType = lunchSchedules\n    ? lunchSchedules[dayType as keyof IStdToLunchSchType]\n    : {};\n  console.log(\"lunchSchType\", lunchSchType);\n\n  //'Schedule125LA'|'Schedule34LA'| 'Schedule125LB'| 'Schedule34LB'|'Schedule125LC' | 'Schedule34LC'\n  switch (lunchSchType) {\n    case \"LA\":\n      // Schedule125LA\n      if ([1, 2, 5].includes(dayNum)) {\n        // schedule.splice(2, 1, ...Schedule125LA);\n        spliceLunchPeriod(schedule, Schedule125LA);\n      } else if ([3, 4].includes(dayNum)) {\n        // schedule.splice(2, 1, ...Schedule34LA);\n        spliceLunchPeriod(schedule, Schedule34LA);\n      }\n      break;\n    case \"LB\":\n      if ([1, 2, 5].includes(dayNum)) {\n        // schedule.splice(2, 1, ...Schedule125LB);\n        spliceLunchPeriod(schedule, Schedule125LB);\n      } else if ([3, 4].includes(dayNum)) {\n        // schedule.splice(2, 1, ...Schedule34LB);\n        spliceLunchPeriod(schedule, Schedule34LB);\n\n      }\n      break;\n    case \"LC\":\n      if ([1, 2, 5].includes(dayNum)) {\n        console.log(\"LC 125\", Schedule125LC);\n        // schedule.splice(2, 1, ...Schedule125LC);\n        spliceLunchPeriod(schedule, Schedule125LC);\n\n      } else if ([3, 4].includes(dayNum)) {\n        console.log(\"LC 34\", Schedule34LC);\n        // schedule.splice(2, 1, ...Schedule34LC);\n        spliceLunchPeriod(schedule, Schedule125LC);\n      }\n      break;\n  }\n  // console.log('updated Schedule', schedule);\n};\n\nexport const determineScheduleType = async (dayStr: string) => {\n  console.log('dateStr', dayStr);\n  const day = moment(dayStr);\n  // console.log('day',day)\n  const dayNum = day.day();\n  const dayType = determineDayTypeByDate(dayStr);\n  \n  // console.log('dayNum',dayNum);\n  // console.log('dayNum',dayNum);\n  var schedule: IType[] = [];\n  if(dayType===DayType.X){\n    return schedule;\n  }\n  if ([1, 2, 5].includes(dayNum)) {\n    schedule = type125;\n  } else if ([3, 4].includes(dayNum)) {\n    schedule = type34;\n  }\n  await console.log('Basic schedule without modifications', schedule);\n\n  // add periods\n  if (dayType === DayType.A) {\n    await schedule?.forEach((item, index) => {\n      item.period = index + 1;\n    });\n  } else if (dayType === DayType.B) {\n    await schedule?.forEach((item, index) => {\n      item.period = index + 5;\n    });\n  }\n  await console.log('Basic schedule after periods', schedule);\n\n  // add subjects\n  await schedule?.forEach((item) => {\n    item.subject = item?.period ? periodToSubject?.get(item?.period) : \"\";\n  });\n  await console.log('Basic schedule after subjects', schedule);\n\n  await addLunchPeriod(\"MAYANKGUPTA\", dayNum, dayType, schedule);\n\n  await console.log('Basic schedule after Lunch', schedule);\n  return schedule;\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  determineDayTypeByDate,\n  determineScheduleType,\n} from \"../common/CommonUtils\";\nimport {IType} from '../data/daySchedule';\nimport {\n  Card,\n  TableContainer,\n  Table,\n  TableCell,\n  TableHead,\n  TableRow,\n  TableBody,\n  Paper,\n  Grid,\n  TextField,\n} from \"@material-ui/core\";\nconst Home = () => {\n  // const date = new Date();\n\n  const [selectedDate, setSelectedDate] = useState<string>(\n    new Date().toLocaleDateString()\n  );\n\n  const [todaySchedule, setTodaySchedule] = useState<IType[]>();\n\n  const handleDateChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    console.log(\"event\", event.target.value);\n    setSelectedDate(event?.target?.value);\n  };\n\n  useEffect(() => {\n    console.log('todaySchedule')\n    determineScheduleType(selectedDate).then(items=>{\n      console.log('schedule', items);\n      setTodaySchedule(items)});\n  }, [selectedDate]);\n\n  return (\n    <Paper>\n      <Grid container justify=\"space-around\">\n        <Grid item xs={4}>\n          <TextField\n            id=\"date\"\n            label=\"Date\"\n            type=\"date\"\n            defaultValue={selectedDate}\n            onChange={handleDateChange}\n            InputLabelProps={{\n              shrink: true,\n            }}\n          />\n        </Grid>\n        <Grid item xs={4}>\n          <p>Date: {selectedDate}</p>\n        </Grid>\n        <Grid item xs={4}>\n          <p>Its a {determineDayTypeByDate(selectedDate)} Day</p>\n        </Grid>\n        <Grid item xs={12}>\n          <p>Today's Schedule</p>\n        </Grid>\n        <TableContainer component={Paper}>\n          <Table aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Time</TableCell>\n                <TableCell>Subject</TableCell>\n                <TableCell>Period</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {todaySchedule?.map((row) => (\n                <TableRow >\n                  <TableCell>{row.time}</TableCell>\n                  <TableCell>{row.subject}</TableCell>\n                  <TableCell>{row.period}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from '../src/page/Home';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Home/>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}